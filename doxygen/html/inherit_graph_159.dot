digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [label="std::exception",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node0 -> Node1 [dir="back",color="steelblue1",style="solid"];
  Node1 [label="std::runtime_error",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node2 [dir="back",color="steelblue1",style="solid"];
  Node2 [label="freetensor::Error",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1Error.html",tooltip=" "];
  Node2 -> Node3 [dir="back",color="steelblue1",style="solid"];
  Node3 [label="freetensor::DriverError",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1DriverError.html",tooltip=" "];
  Node2 -> Node4 [dir="back",color="steelblue1",style="solid"];
  Node4 [label="freetensor::InterruptExcept",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1InterruptExcept.html",tooltip=" "];
  Node2 -> Node5 [dir="back",color="steelblue1",style="solid"];
  Node5 [label="freetensor::InvalidAutoGrad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1InvalidAutoGrad.html",tooltip=" "];
  Node2 -> Node6 [dir="back",color="steelblue1",style="solid"];
  Node6 [label="freetensor::InvalidIO",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1InvalidIO.html",tooltip=" "];
  Node2 -> Node7 [dir="back",color="steelblue1",style="solid"];
  Node7 [label="freetensor::InvalidProgram",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1InvalidProgram.html",tooltip=" "];
  Node7 -> Node8 [dir="back",color="steelblue1",style="solid"];
  Node8 [label="freetensor::AssertAlways\lFalse",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1AssertAlwaysFalse.html",tooltip=" "];
  Node2 -> Node9 [dir="back",color="steelblue1",style="solid"];
  Node9 [label="freetensor::InvalidSchedule",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1InvalidSchedule.html",tooltip=" "];
  Node2 -> Node10 [dir="back",color="steelblue1",style="solid"];
  Node10 [label="freetensor::NeedVarReorder",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structfreetensor_1_1NeedVarReorder.html",tooltip=" "];
  Node2 -> Node11 [dir="back",color="steelblue1",style="solid"];
  Node11 [label="freetensor::ParserError",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1ParserError.html",tooltip=" "];
  Node2 -> Node12 [dir="back",color="steelblue1",style="solid"];
  Node12 [label="freetensor::SymbolNotFound",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1SymbolNotFound.html",tooltip=" "];
  Node2 -> Node13 [dir="back",color="steelblue1",style="solid"];
  Node13 [label="freetensor::UnexpectedQuery\lResult",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classfreetensor_1_1UnexpectedQueryResult.html",tooltip=" "];
}
